(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{401:function(t,s,a){"use strict";a.r(s);var e=a(44),i=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"git-详解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-详解"}},[t._v("#")]),t._v(" Git 详解")]),t._v(" "),a("p",[t._v("在说 git 之前，先说说它和 svn 等版本控制工具的不同。")]),t._v(" "),a("p",[t._v("从对待数据的方法上来说，大部分工具是以"),a("strong",[t._v("文件变更列表")]),t._v("的方式储存，它们将存储的信息看作是一组基本文件和每个文件随时间逐步积累的差异("),a("strong",[t._v("基于差异的版本控制")]),t._v(")。")]),t._v(" "),a("p",[t._v("git 则不然，它更像是一个把数据看成是对小型文件系统的一系列快照，每当提交更新或保存项目状态时，就会对当时项目的全部文件创建一个快照并保存这个快照的索引，"),a("strong",[t._v("如果文件没被修改，git 就不会重新存储该文件，而是保留一个链接指向之前存储的文件")]),t._v("，这么来看，git 对待数据更像是快照流而不是差异流。")]),t._v(" "),a("h2",{attrs:{id:"三种状态"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三种状态"}},[t._v("#")]),t._v(" 三种状态")]),t._v(" "),a("p",[t._v("git 有三种状态：")]),t._v(" "),a("ul",[a("li",[t._v("**已修改（modified）**表示修改了文件，但还没保存到数据库中。")]),t._v(" "),a("li",[t._v("**已暂存（staged）**表示对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中。")]),t._v(" "),a("li",[t._v("**已提交（committed）**表示数据已经安全地保存在本地数据库中。")])]),t._v(" "),a("p",[t._v("所以 git 项目拥有三个阶段："),a("strong",[t._v("工作区")]),t._v("、"),a("strong",[t._v("暂存区")]),t._v("和"),a("strong",[t._v("git 仓库目录")]),t._v("。")]),t._v(" "),a("p",[t._v("工作区是对项目的某个版本独立提取出来的内容，从 git 仓库中将文件提取出来放到磁盘上修改。")]),t._v(" "),a("p",[t._v("暂存区是一个保存了下次将要提交的文件信息的文件，一般在 git 仓库目录中。")]),t._v(" "),a("p",[t._v("git 仓库目录时 git 用来保存项目的元数据核对像数据库的地方，是 git 中最重要的部分。")]),t._v(" "),a("p",[t._v("基本的 git 工作流程如下：")]),t._v(" "),a("ol",[a("li",[t._v("在工作区中修改文件。")]),t._v(" "),a("li",[t._v("将你想要下次提交的更改选择性地暂存，这样只会将更改的部分添加到暂存区。")]),t._v(" "),a("li",[t._v("提交更新，找到暂存区的文件，将快照永久性存储到 git 目录。")])]),t._v(" "),a("h2",{attrs:{id:"命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#命令"}},[t._v("#")]),t._v(" 命令")]),t._v(" "),a("p",[t._v("在目录中初始化仓库。")]),t._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[t._v("git init\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("如果在一个非空文件夹进行版本控制，可以使用 add 来指定所需文件进行追踪。")]),t._v(" "),a("p",[a("code",[t._v("git add")]),t._v(" 既可以追踪文件，也可以把已跟踪的文件放到暂存区，还能用于合并时把有冲突的文件标记为已解决状态等，所以这个命令的作用应该是"),a("strong",[t._v("精确地将内容添加到下一次提交中")]),t._v("。")]),t._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[t._v("git add 文件路径\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("克隆现有的仓库")]),t._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[t._v("git clone 仓库链接\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("可以查看哪些文件处于什么状态，不外乎两种：已跟踪或未跟踪。")]),t._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[t._v("git status\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("运行 commit 提交，注意："),a("strong",[t._v("commit 提交的是最后一次运行 add 时暂存的版本，而不是当前工作目录的版本，如果想提交最新版本，需要再使用 add 重新暂存")]),t._v("。")]),t._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[t._v("git commit\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("如果想要 git 忽略一些不需要提交的文件，创建 "),a("code",[t._v(".gitignore")]),t._v("。")]),t._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[t._v("cat .gitignore\n*.[oa] // 忽略所有以.o或.a结尾的文件\n*~ // 忽略所有~结尾的文件\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[t._v("如果想知道具体修改了哪些内容，使用 diff 查看。")]),t._v(" "),a("p",[a("code",[t._v("git diff")]),t._v(" 本身只显示尚未暂存的改动，而不是自提交以来所做的所有改动，如果你用 add 暂存了改动的文件，使用 diff 将不会看到结果。")]),t._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[t._v("git diff\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("mv 命令可以改动文件名。")]),t._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[t._v("git mv 改动前名字 改动后名字\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("运行 mv 等同于：")]),t._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[t._v("mv 改动前名字 改动后名字\ngit rm 改动前名字\ngit add 改动后名字\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[t._v("使用 log 命令查看提交历史，在不输入任何参数的条件下默认按时间顺序输出所有提交历史，包含作者名字，邮件地址等等。")]),t._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[t._v("git log\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("如果只是想快速浏览某个搭档的提交所带来的变化，可以使用 patch 参数。")]),t._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[t._v("git log --patch\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("下面是一些 log 命令的常用参数：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("参数")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("说明")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("-p")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("按补丁格式显示每个提交引入的差异")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("--stat")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("显示每次提交的文件修改统计信息")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("--shortstat")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("只显示 --stat 中最后的行数修改添加移除统计")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("--pretty")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("使用其他格式显示历史提交信息。可用的选项包括 oneline、short、full、fuller 和 format（用来定义自己的格式）")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("--graph")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("在日志旁以 ASCII 图形显示分支与合并历史")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("--name-status")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("显示新增、修改、删除的文件清单")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("--name-only")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("仅在提交信息后显示已修改的文件清单")])])])]),t._v(" "),a("p",[t._v("有的时候提交完才发现有几个文件没有添加，或者提交信息写错了，可以使用 amend 重新提交。")]),t._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[t._v("git commit --amend\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("可以推送自己的项目到远程仓库。")]),t._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[t._v("git push origin master\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("h2",{attrs:{id:"分支"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分支"}},[t._v("#")]),t._v(" 分支")]),t._v(" "),a("p",[t._v("之前我们说过，git 对待数据是以快照的方式保存。")]),t._v(" "),a("p",[t._v("在进行 commit 提交时，git 会保存一个提交对象。该对象包含一个指向暂存内容快照的指针，还包含作者的姓名，邮箱等等信息以及指向它的父对象的指针。当然，首次提交的提交对象没有父对象。多个分支合并产生的提交对象则有多个父对象。")]),t._v(" "),a("p",[t._v("假设有一个工作目录，里面包含了三个将要被暂存和提交的文件，暂存操作会为每一个文件计算校验和。然后把当前版本文件的快照保存到 git 仓库，然后将校验和加入到暂存区域等待提交。")]),t._v(" "),a("p",[t._v("这样 git 仓库就有五个对象：三个"),a("strong",[t._v("保存着文件快照的 blob")]),t._v("，一个"),a("strong",[t._v("记录着目录结构和 blob 对象索引的树对象")]),t._v("，以及一个"),a("strong",[t._v("提交对象")]),t._v("。")]),t._v(" "),a("p",[t._v("当做些修改后再次提交，这次产生地提交对象会包含一个指向上一个提交对象的指针。")]),t._v(" "),a("p",[t._v("git 的分支实质上是一个"),a("strong",[t._v("指向提交对象的可变指针")]),t._v("，git 的默认分支名字是 master，这和其他分支并没有区别。")]),t._v(" "),a("p",[t._v("创建新分支：")]),t._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[t._v("git branch test\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("这会在当前提交对象上创建一个指针，当然，这仅仅是创建一个新分支，并不会自动切换到新分支上。")]),t._v(" "),a("p",[t._v("可以使用 checkout 切换分支")]),t._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[t._v("git checkout test\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("创建并切换分支")]),t._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[t._v("git checkout -b test\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("主分支会随着提交操作自动向前移动，当 test 和 master 分支指向的提交对象不同时，切换分支会使工作目录恢复成切换分支所指向的快照内容，这便于项目向另一个方向进发。")]),t._v(" "),a("p",[t._v("这会使提交历史产生分叉：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://git-scm.com/book/en/v2/images/advance-master.png",alt:""}})]),t._v(" "),a("p",[t._v("想要合并分支的话，先切换到 master 上，再合并分支：")]),t._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[t._v("git checkout master // 单人开发\ngit pull origin master // 如果是多人开发，可能需要把远程master的代码pull下来\ngit merge test // 把test合并到master上\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[t._v("删除分支：")]),t._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[t._v("git push origin -d test // 删除远程分支\ngit branch -d test // 删除本地分支\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[t._v("如果在两个不同的分支中对同一文件的同一个部分进行了不同的修改，就会产生合并冲突。")]),t._v(" "),a("p",[t._v("这时 git 做了合并，但是没有创建一个新的合并提交，git 会暂停下来等待你解决冲突。")]),t._v(" "),a("p",[t._v("使用 "),a("code",[t._v("git status")]),t._v(" 查看冲突(unmerged)文件，这样就可以打开这些文件然后手动解决冲突。")]),t._v(" "),a("p",[t._v("fetch 命令可以更新你的远程追踪分支。")]),t._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[t._v("git fetch\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("remote 可以查看已存在的远程分支")]),t._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[t._v("git remote\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("h2",{attrs:{id:"git-协议"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-协议"}},[t._v("#")]),t._v(" git 协议")]),t._v(" "),a("p",[t._v("git 可以使用四种不同的协议传输资料："),a("strong",[t._v("本地协议")]),t._v("，"),a("strong",[t._v("HTTP 协议")]),t._v("，"),a("strong",[t._v("SSH 协议")]),t._v("和 "),a("strong",[t._v("git 协议")]),t._v("。")]),t._v(" "),a("h2",{attrs:{id:"git-常见面试题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-常见面试题"}},[t._v("#")]),t._v(" git 常见面试题")]),t._v(" "),a("h3",{attrs:{id:"常用到几种-git-命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常用到几种-git-命令"}},[t._v("#")]),t._v(" 常用到几种 git 命令")]),t._v(" "),a("ul",[a("li",[t._v("初始化 git 仓库："),a("code",[t._v("git init")])]),t._v(" "),a("li",[t._v("将文件添加到下一次提交中(暂存区)："),a("code",[t._v("git add file")]),t._v(" / "),a("code",[t._v("git add .")])]),t._v(" "),a("li",[t._v("查看工作区状况："),a("code",[t._v("git status")])]),t._v(" "),a("li",[t._v("拉取远程分支："),a("code",[t._v("git fetch")])]),t._v(" "),a("li",[t._v("合并分支："),a("code",[t._v("git merge")])]),t._v(" "),a("li",[t._v("拉取并合并分支："),a("code",[t._v("git pull")]),t._v(" = "),a("code",[t._v("git fetch")]),t._v(" + "),a("code",[t._v("git merge")])]),t._v(" "),a("li",[t._v("提交暂存区的文件："),a("code",[t._v("git commit")])])]),t._v(" "),a("h3",{attrs:{id:"提交时发生冲突-你能解释冲突是如何产生的吗-是如何解决的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#提交时发生冲突-你能解释冲突是如何产生的吗-是如何解决的"}},[t._v("#")]),t._v(" 提交时发生冲突，你能解释冲突是如何产生的吗，是如何解决的")]),t._v(" "),a("p",[t._v("两个不同的分支中对同一文件的同一个部分进行了不同的修改，就会产生合并冲突")]),t._v(" "),a("p",[t._v("对比本地文件和远程分支的文件，然后把远程分支上的文件内容修改到本地文件，然后再提交冲突文件，使其保证与远程分支文件一致，然后再提交自己修改的那部分。")]),t._v(" "),a("p",[t._v("使用命令：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("git stash")]),t._v(" 把工作区的修改提交到栈区，目的是保存工作区的修改。")]),t._v(" "),a("li",[a("code",[t._v("git pull")]),t._v(" 拉取远程分支上的代码并合并到本地分支，目的是消除冲突。")]),t._v(" "),a("li",[a("code",[t._v("git stash pop")]),t._v(" 把保存在栈区的修改部分合并到最新的工作空间中。")])]),t._v(" "),a("h3",{attrs:{id:"什么是-git-中的-裸存储库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是-git-中的-裸存储库"}},[t._v("#")]),t._v(" 什么是 Git 中的“裸存储库”")]),t._v(" "),a("p",[t._v("创建裸存储库")]),t._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[t._v("git init --bare\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("裸存储库中只包含版本控制信息而没有工作文件，并且它不包含特殊的 "),a("code",[t._v(".git")]),t._v(" 子目录，它直接在主目录本身包含 "),a("code",[t._v(".git")]),t._v(" 子目录中的所有内容:")]),t._v(" "),a("ul",[a("li",[t._v("一个 "),a("code",[t._v(".git")]),t._v(" 子目录，其中包含你的仓库所有相关的 git 修订历史记录。")]),t._v(" "),a("li",[t._v("工作树，或签出的项目文件的副本。")])]),t._v(" "),a("h3",{attrs:{id:"如何还原已经-push-并公开的提交"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何还原已经-push-并公开的提交"}},[t._v("#")]),t._v(" 如何还原已经 push 并公开的提交")]),t._v(" "),a("p",[t._v("删除或修复新提交中的错误文件，并将其推送到远程存储库。这是修复错误的最自然方式。对文件进行必要的修改后，将其提交到我将使用的远程存储库。")]),t._v(" "),a("h3",{attrs:{id:"git-merge-和-git-rebase-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-merge-和-git-rebase-的区别"}},[t._v("#")]),t._v(" git merge 和 git rebase 的区别")]),t._v(" "),a("p",[t._v("git merge 会把分支的差异内容 pull 到本地，然后与本地分支的内容一并形成一个 committer 对象提交到主分支上，合并后的分支与主分支一致。")]),t._v(" "),a("p",[t._v("git rebase 会把分支优先合并到主分支，然后把本地分支的 commit 放到主分支后面，合并后的分支就好像从合并后主分支又拉了一个分支一样，本地分支本身不会保留提交历史。")]),t._v(" "),a("h3",{attrs:{id:"如何把本地仓库的内容推向一个空的远程仓库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何把本地仓库的内容推向一个空的远程仓库"}},[t._v("#")]),t._v(" 如何把本地仓库的内容推向一个空的远程仓库")]),t._v(" "),a("p",[t._v("先连接远程仓库：")]),t._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[t._v("git remote add origin 远程仓库地址\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("如果是第一次推送，则进行下面命令，-u 是指定 origin 为默认主分支")]),t._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[t._v("git push -u origin master\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("h3",{attrs:{id:"fork-branch-clone-之间有什么区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fork-branch-clone-之间有什么区别"}},[t._v("#")]),t._v(" fork，branch，clone 之间有什么区别")]),t._v(" "),a("p",[t._v("fork 是对存储仓库进行远程的，服务器端的拷贝，从源头上就有区别，实际上不属于 git 范畴。")]),t._v(" "),a("p",[t._v("clone 不是复刻，克隆是对某个远程仓库的本地拷贝，拷贝的是整个仓库，包括所有历史记录和分支。")]),t._v(" "),a("p",[t._v("branch 是代码的一个独立版本，"),a("strong",[t._v("用于处理单一存储仓库中的变更，并最终目的是用于与其他部分代码合并")]),t._v("。")])])}),[],!1,null,null,null);s.default=i.exports}}]);